#!/bin/bash
# Google GCP note: to run, you must first create a kubernetes cluster with plenty of RAM - we use n1-standard-2 (7.5GB)

echo "redeploying citus on kubernetes..."

source docker-scripts/spinner.sh
source ./setup-db-vars.env > /dev/null
echo "$NUM_WORKERS workers found in worker-deployment.yaml"

echo "deleting existing citus deployment..."
active=`kubectl get -o name pods,deployments,services,pvc | egrep -v '(kubernetes|kyrix)' | xargs echo`
for elem in $active; do
    if ((`echo $active | grep -c $elem` > 0 )); then kubectl delete $elem; echo "deleting $elem..."; fi
done

while [ 1 ]; do w=`kubectl get -o name pods,deployments,services,pvc | egrep -v '(kubernetes|kyrix)' | wc -l`; if [ $w = 0 ]; then break; fi; echo "waiting for $w kubernetes resources (pods, etc) to shut down"; sleep 3; done

echo "starting new deployment..."
for file in master-service manager-deployment master-deployment worker-deployment; do
    kubectl create -f $file.yaml
done

echo "waiting for new deployment to complete..."

while [ 1 ]; do w=`kubectl get pods | egrep -c 'worker.+Running'`; if [ $w = $NUM_WORKERS ]; then break; fi; echo "$w kubernetes containers running, waiting for $NUM_WORKERS"; sleep 3; done
echo "all $NUM_WORKERS kubernetes containers running."

source ./setup-citus-vars.env > /dev/null

# convenience for developers
kubectl exec -it $MASTER -- su - postgres -c "echo \"\\set PROMPT1 '%n@%/%R%# '\" > .psqlrc"

echo "master=$MASTER, manager=$MANAGER, workers=$WORKERS"

echo "waiting for postgres and citus initialization..."
while [ 1 ]; do w=`for w in $WORKERS; do kubectl exec -it $w -- su - postgres -c "pg_isready"; done | grep -c accepting`; if [ $w = $NUM_WORKERS ]; then break; fi; echo "$w kubernetes postgres servers running, waiting for $NUM_WORKERS"; sleep 3; done

SQL_EXTENSIONS="psql -t -c \"select * from pg_extension\""
while [ 1 ]; do w=`for w in $WORKERS; do kubectl exec -it $w -- su - postgres -c "psql -t -c \"select count(*) from pg_extension where extname = 'citus';\""; done | grep -c 1`; if [ $w = $NUM_WORKERS ]; then break; fi; echo "$w postgres servers initialized with citus, waiting for $NUM_WORKERS"; sleep 3; done

for w in $WORKER_IPS; do kubectl exec $MASTER -- su - postgres -c "psql -t -c \"SELECT * from master_add_node('$w', 5432);\""|grep 5432; done|head
# TODO: for now, $USERNAME is created as a superuser
USER_CMD="SET password_encryption = '$PG_ENCRYPTION';create user $USERNAME superuser password '$USER_PASSWORD'; alter user postgres password '$POSTGRES_PASSWORD'"
for w in $WORKERS; do kubectl exec $w -- su - postgres -c "psql -t -c \"$USER_CMD\" "; done|grep ALTER
kubectl exec $MASTER -- su - postgres -c "psql -c \"select run_command_on_workers('create database $DBNAME owner $USERNAME');\" "

echo "exposing bastion early - it take minutes to allocate an external IP"
# important: citus installs on Docker startup and opens all forms of connection to being passwordless,
# which is super dangerous with the k8s bastion which then opens it to the whole internet !
# Instead, lock down postgres trusted-login to just the internal subnet of the k8s pod used by citus.
# note: because of this, we have to wait until citus initializes...
kubectl exec $MASTER -- su - postgres -c "psql -c \"$USER_CMD\""
# restrict everywhere to password access
kubectl exec $MASTER -- sed -i "s@host all all all trust@host all all all $PG_ENCRYPTION@" /var/lib/postgresql/data/pg_hba.conf
# HACK: hardcoded to /16 networks, as used by Google Cloud
# allow citus to communicate without passwords
kubectl exec $MASTER -- bash -c "echo \"host all all $POD_INTERNAL_SUBNET trust\" >> /var/lib/postgresql/data/pg_hba.conf"
kubectl exec $MASTER -- cat /var/lib/postgresql/data/pg_hba.conf | egrep '^(host|local)'
kubectl exec $MASTER -- bash -c "echo \"plv8.start_proc = 'commonjs.plv8_startup'\" >> /var/lib/postgresql/data/postgresql.conf"
kubectl exec $MASTER -- su - postgres -c "/usr/lib/postgresql/11/bin/pg_ctl -D /var/lib/postgresql/data reload -s"
kubectl expose replicaset.apps/$RS_MASTER --type=LoadBalancer --name=bastion

for w in $WORKERS; do 
  kubectl exec $w -- bash -c "echo \"plv8.start_proc = 'commonjs.plv8_startup'\" >> /var/lib/postgresql/data/postgresql.conf"
  kubectl exec $w -- su - postgres -c "/usr/lib/postgresql/11/bin/pg_ctl -D /var/lib/postgresql/data reload -s"
done

# setup user database
echo "setting up user database $DBNAME (slow because of postgis initialization)"
kubectl exec $MASTER -- su - postgres -c "psql -c \"create database $DBNAME owner $USERNAME;\" " | grep CREATE 2>&1
#EXT_CMD='create extension if not exists citus; create extension if not exists postgis; create extension if not exists postgis_topology; create extension if not exists postgis_sfcgal; create extension if not exists fuzzystrmatch; create extension if not exists address_standardizer; create extension if not exists address_standardizer_data_us; create extension if not exists postgis_tiger_geocoder';
EXT_CMD="create extension if not exists citus; create extension if not exists plv8"
kubectl exec $MASTER -- su - postgres -c "psql $DBNAME -c \"$EXT_CMD\" "; stty sane  # HARMLESS HACK: for some reason the EXT_CMD corrupts the TTY on my Mac iTerm2
# run_command_on_workers() can't run until citus is initialized and master_add_node() called.
for w in $WORKERS; do kubectl exec $w -- su - postgres -c "psql $DBNAME -c \"$EXT_CMD\" " > /dev/null 2> /dev/null & done;

while [ 1 ]; do w=`for w in $WORKERS; do stty sane; kubectl exec -it $w -- su - postgres -c "psql $DBNAME -t -c \"select count(*) from pg_extension where extname = 'plv8' or extname='citus';\""; done | grep -c 2`; if [ $w = $NUM_WORKERS ]; then break; fi; echo "$w postgres servers initialized with extensions, waiting for $NUM_WORKERS (be patient)"; sleep 3; done; stty sane

# register workers with master
for w in $WORKER_IPS; do kubectl exec $MASTER -- su - postgres -c "psql $DBNAME -t -c \"SELECT * from master_add_node('$w', 5432);\""|grep 5432; done|head

for w in $CITUS_ALL_NODES; do kubectl exec $w -- su - postgres -c "./install-d3.sh $DBNAME"; done

kubectl exec $MASTER -- su - postgres -c "psql $DBNAME -c \"select run_command_on_workers(\\\$\\\$ DO \\\$v8\\\$ require('d3'); \\\$v8\\\$ language plv8; \\\$\\\$)\""

./test-citus
./test-plv8
#./test-postgis

echo "waiting for k8s bastion startup (slow because of external IP allocation)..."

while [ 1 ]; do ip=`kubectl get services -o wide | grep bastion | awk '{print $4}'`; if [ $ip != '<pending>' ]; then break; fi; echo "waiting for external IP... "; sleep 2; done

# for development
echo "installing developer tools (optional)"
kubectl exec -it $MASTER -- sh -c 'if [ -x "$(command -v apt)" ]; then apt install -y iputils-ping telnet emacs; fi' > /dev/null 2>&1  # ubuntu
kubectl exec -it $MASTER -- sh -c 'if [ -x "$(command -v apk)" ]; then apk install -y bash busybox-extras emacs; fi' > /dev/null 2>&1  # alpine

source setup-bastion-vars.env > /dev/null

echo "done! to connect to citus:"
echo " - easy: source ./setup-shell-vars.env; kyrix-psql"
echo " - manually: psql postgres://$USERNAME:$USER_PASSWORD@$BASTION_IP/$DBNAME   (warning: uses old MD5 auth: not safe over the open internet)"
